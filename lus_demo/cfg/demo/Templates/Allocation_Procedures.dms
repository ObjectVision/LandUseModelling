// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                 Configuration Land Use Scanner - Student Edition                     //
//                          using GeoDMS version 14.14 or newer                         //
//                                                                                      //
//                           Vrije Universiteit Amsterdam                               //
//                               July 2004 - June 2024                                  //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// This configuration file contains the algorithm                                       //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
 
Template Allocation_procedures_T 
: Using = "Units;geography;Classifications;Templates"
, Descr = "This CalculationSchema allocates according to the description in the article:
Hilferink, M.Th.A. & P. Rietveld, The Land Use Scanner; An integrated model for long term projections of land use in urban and rural areas,
Journal of Geographic Systems, p. 155-177, 1999. The symbols used in the description 
are explained in this article and the description of the calculation rules refers to the formula numbers there."
{
	// Begin CaseParameters
	container                orgLanduse        : Descr = "For the calculation of the TotalClaims (Dj) we need this original landuse of the endogenous types and the additional Claims";
	container                ExogenousLand     : Descr = "exogenous landuse types";
	container                Suitabilities     : Descr = "Scj:Suitability maps per cell per endogenous lu-type";
	container                Additional_Claims : Descr = "Crj: Additional Claims per region per lu-type";
	parameter<YearDiffRange> PeriodDuration    : Descr = "Periodelengte (in jaren) waarnaar de claims geinterpoleerd moeten worden (claims zijn voor 2040 bepaald)";
	parameter<IterRange>     nrIter            : Descr = "Aantal iteraties voor het fitten van de claims met de beschikbare grond. 4 is weinig; als na 25 iteraties nog steeds geen evenwicht is gevonden, zijn de claims wellicht infeasable";
	parameter<m2_Eur>        betaFactor        : Descr = "Zie wiskundige beschrijving; hoog (5.0) geeft een scherp beeld na veel iteraties; laag (0.5) geeft meer verdeeld ruimtegebruik";
	// End CaseParameters
	
	unit<UInt32>             RegioUnit         := /Geography/RegionalUnits/RandstadIntermediatePeripheral, IsHidden = "true";

	container CaseData:  IsHidden = "true"
	{ 
		container Land: Descr = "These attributes are used to describe the freeLand for allocation"
		{
			attribute<Ha> TotalLand          (domain) := const(domain/NrHaPerCell, domain);
			attribute<Ha> TotalExogenousLand (domain) := ='add('+asItemList('ExogenousLand/' + ggExogenous/Name)+')';
			attribute<Ha> UsedLand           (domain) := min_elem(TotalLand, TotalExogenousLand);
			attribute<Ha> ExogenousOverflow  (domain) := TotalExogenousLand - UsedLand;
			attribute<Ha> FreeLand           (domain) := TotalLand - UsedLand, Descr    = "Lc = TotalLand - exogenousLand: free allocatable land";
		}

		parameter<Potentiaal> claimFactor := PeriodDuration[float32] / ModelParameters/Advanced/ClaimPeriod[float32], Descr = "Indication of how much of the additional claims must be consumed in this allocation";

		container TotalPeriodClaims := 
				for_each_nedv(
					ggEndogenous/Name
					,'max_elem(Additional_Claims/'+ggEndogenous/Name+'/claim * claimFactor + sum(orgLandUse/'+ggEndogenous/Name+', Geography/RegioGrids/ClaimRegions), 0[claimHa])'
					, RegioUnit
					, claimHa
				), Descr    = "Dj: Total Claims";

		container Compacted
		{ 
			attribute<bool> HasFreeLand (domain):= Land/TotalExogenousLand < domain/NrHaPerCell;

			unit <uint32> ADomain := select_with_org_rel(HasFreeLand)
			,	label      = "allocation domain"
			,	DialogType = "Map"
			,	DialogData = "BaseGrid";

			container SuitabilityMaps :=
				for_each_nedv(
					  classifications/ggEndogenous/label
					, 'Suitabilities/'+classifications/ggEndogenous/label+'[ADomain/org_rel]'
					, ADomain
					, EUR_M2
				);
				
			attribute<ADomain> BaseGrid (domain):= invert(ADomain/org_rel);

			container Demands :=
				for_each_nedv(
					   ggEndogenous/Name
					, 'exp(betaFactor * SuitabilityMaps/'+ggEndogenous/Name+')[Units/DemandUnit]'
					, ADomain
					, Units/DemandUnit
				), Descr = "exp(betaFactor * Scj): beta rescaled exponent of suitability maps";

			container RegioGrids :=
				for_each_nedv(
					  Classifications/ggEndogenous/Name
					, 'Geography/RegioGrids/ClaimRegions[ADomain/org_rel]'
					, ADomain
					, RegioUnit
				);
		}

		// create iterator
		container iterator := loop(_IterTemplate, nrIter);

		container allocate_discrete
		{ 
			attribute<bool> HasFreeLand (domain) := Land/TotalExogenousLand <= 0.5f * domain/NrHaPerCell;
			container Compacted
			{
				unit <uint32> ADomain := select_with_org_rel(HasFreeLand)
				,	label      = "allocation domain"
				,	DialogType = "Map"
				,	DialogData = "BaseGrid";

				container SuitabilityMaps := 
					for_each_nedv(
						  classifications/ggEndogenous/label
						, 'MakeDefined(Suitabilities/'+classifications/ggEndogenous/label+'[ADomain/org_rel] * 100f, 0f)[int32]'
						, ADomain
						, Int32
					)
				;
	
				attribute<AtomicRegions> AtomicRegionMap (ADomain):= AtomicRegions/UnionData[ADomain/org_rel];
	
				attribute<ADomain> BaseGrid (domain):= invert(ADomain/org_rel);
			}
			container regionSets
			{
				attribute<Geography/RegionalUnits/RandstadIntermediatePeripheral> residential (domain):= Geography/RegioGrids/ClaimRegions;
				attribute<Geography/RegionalUnits/RandstadIntermediatePeripheral> industrial  (domain):= Geography/RegioGrids/ClaimRegions;
				attribute<Geography/RegionalUnits/RandstadIntermediatePeripheral> recreation  (domain):= Geography/RegioGrids/ClaimRegions;
				attribute<Geography/RegionalUnits/RandstadIntermediatePeripheral> agriculture (domain):= Geography/RegioGrids/ClaimRegions;
				attribute<Geography/RegionalUnits/RandstadIntermediatePeripheral> nature      (domain):= Geography/RegioGrids/ClaimRegions;
				attribute<Geography/RegionalUnits/RandstadIntermediatePeripheral> buildinglot (domain):= Geography/RegioGrids/ClaimRegions;
			}
			container minclaims := //in aantal cellen
				for_each_nedv(
					  classifications/ggEndogenous/Label
					, 'id(RegioUnit) <> 0[RegioUnit]
						? uint32(0.9f * CaseData/TotalPeriodClaims/'+classifications/ggEndogenous/Label+' / domain/NrHaPerCell)
						: 0'
					, RegioUnit
					, uint32
				);
				
			container maxclaims := //in aantal cellen
				for_each_nedv(
					  classifications/ggEndogenous/Label
					, 'uint32(1.1f * CaseData/TotalPeriodClaims/'+classifications/ggEndogenous/Label+' / domain/NrHaPerCell)'
					, RegioUnit
					, uint32
				);
	
			unit<uint16> AtomicRegions:= overlay(classifications/ggEndogenous/label, domain, regionSets);
			parameter<int32> treshold := 0i;
			container FeasibleSolution;
	
			container result :=
				discrete_alloc(
					  classifications/ggEndogenous/label  //attr string
					, Compacted/ADomain                   //unit uint32
					, Compacted/SuitabilityMaps           //cont int32
					, id(classifications/ggEndogenous)    //attr uint8
					, classifications/ggEndogenous/label  //attr string
					, AtomicRegions                       //unit uint16
					, Compacted/AtomicRegionMap           //attr uint16
					, minclaims                           //cont uint32
					, maxclaims                           //cont uint32
					, treshold                            //para int32
					, FeasibleSolution                    //cont empty
				)
			{
				attribute<classifications/ggEndogenous> landuse_grid (domain):= landuse[Compacted/BaseGrid];
			}
		}
	}

	container Results
	{ 
		container Continuous: Descr = "Allocated landuse resulting from the balancing iteration + ground-price indication"
		{
			container ClaimSummary
			:	IsHidden = "True"
			,	Using    = "Geography/RegionalUnits"
			,	Descr    = "These parameters indicate of the sum of claims fits the sum of availaible freeLand; which is a neccesary (but not sufficient) condition"
			{
				parameter<claimHa> sumClaims     := ='add('+asItemList('sum(CaseData/TotalPeriodClaims/'+ggEndogenous/Name+')')+')';
				parameter<claimHa> totalLand     := sum(CaseData/Land/TotalLand);
				parameter<claimHa> usedLand      := sum(CaseData/Land/UsedLand );
				parameter<claimHa> freeLand      := sum(CaseData/Land/FreeLand);
				parameter<Bool>    totalClaimsFit:= freeLand >= sumClaims;
				parameter<claimHa> claimSlack    := max_elem(freeLand - sumClaims, 0[claimHa]);
				parameter<claimHa> claimExcess   := max_elem(sumClaims- freeLand,  0[claimHa]);
			}
			container LandUse: Descr = "The resulting landuse is the combination of (casedata/iterator/allocated_landuse) and (exogenousLanduse)"
			{
				container Endogenous :=
					for_each_nedv(
						  ggEndogenous/Name
						, 'casedata/iterator/lastIter/allocated_land/'+ggEndogenous/Name+'/NrHaPerCell[CaseData/Compacted/BaseGrid]'
						, domain
						, Ha)
				{
					attribute<Ha> Total(domain):= ='add('+asItemList(ggEndogenous/Name)+')', isHidden = "True";
				}

				container Exogenous :=
					for_each_nedv(
							  ggExogenous/Name
							, 'exogenousLand/'+ggExogenous/Name
							, domain
							, Ha)
				{
					attribute<Ha> Total(domain):= ='add('+asItemList(ggExogenous/Name)+')', isHidden = "True";
				}
				attribute <LUclasses> Predominant (domain) := ='argmax('+asItemList('MakeDefined('+(ggModel/IsExogenous ? 'Exogenous/' : 'Endogenous/') +ggModel/Name+',0[Ha])')+')[LUclasses]';
				attribute <Ha>        Total       (domain) := Endogenous/Total + Exogenous/Total,  isHidden = "True";
			}

			container GOF: IsHidden = "True"
			{
				unit<uint16>          ThisIterRange                      := Range(IterRange, UInt16(0) , UInt16(nrIter));
				attribute<String>     IterNames          (ThisIterRange) := 'iter'+String(ID(ThisIterRange));
				attribute<claimHa>    TotalDeviations    (ThisIterRange) := ='add('+asItemList('Float32(ID(ThisIterRange)==value('+String(ID(ThisIterRange))+',ThisIterRange))*casedata/iterator/'+IterNames+'/TotalDeviation')+')';
				attribute<Potentiaal> LogTotalDeviations (ThisIterRange) := log(TotalDeviations / 1[claimHa]);
			}

			#include <evaluation.dms>

			container adjustedDemands :=
					for_each_nedv(
						  ggEndogenous/Name
						, 'casedata/iterator/lastIter/adjusted_demands/'+ggEndogenous/Name+'[CaseData/Compacted/BaseGrid]'
						, domain
						, DemandUnit
					), isHidden = "True", Descr = "The resulting adjustedDemands comes from the last iteration; it also contains the total demands"
			{
				attribute<DemandUnit> total_demand (domain):= casedata/iterator/lastIter/total_demand[CaseData/Compacted/BaseGrid];
				attribute<EUR_M2>     land_price   (domain):= log(total_demand / value(1.0, DemandUnit)) / betaFactor;
	
				attribute <ggEndogenous> Dominant_ggEndogenous (domain):= ='CaseData/Land/FreeLand > domain/NrHaPerCell / 10f
																				? argmax('+asItemList(ggEndogenous/Name)+')[ggEndogenous]
																				: (0/0)[ggEndogenous]';
			}
		}
		container Discrete : IsHidden = "True" 
		{
			container LandUse
			{
				attribute<ggEndogenous>  Endogenous (domain) := casedata/allocate_discrete/result/landuse_grid;
				attribute<ggExogenous>   Exogenous  (domain) := ='casedata/allocate_discrete/HasFreeLand ? value(0 / 0,ggExogenous) : value(argmax('+asItemList(+'ExogenousLand/'+classifications/ggExogenous/name)+'), ggExogenous)';
				attribute<LUclasses>     Model      (domain) := MakeDefined(classifications/ggEndogenous/nr_OrgEntity[Endogenous], classifications/ggExogenous/nr_OrgEntity[Exogenous])[LUclasses];
			}
		}
	}
}


