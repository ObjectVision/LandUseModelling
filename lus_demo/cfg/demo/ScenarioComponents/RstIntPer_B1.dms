// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                 Configuration Land Use Scanner - Student Edition                     //
//                          using GeoDMS version 7.130 or newer                         //
//                                                                                      //
//                           Vrije Universiteit Amsterdam                               //
//                               July 2004 - January 2023                               //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// This configurationfile contains the claimregion definitions for all endogenous       //
// land use classes for the B1 Strong Europe scenario                                   //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////

container B1_SE
{
	parameter<YearDiffRange> ClaimPeriod               := (ModelParameters/Advanced/ModelYear - ModelParameters/Advanced/StartYear)[YearDiffRange], isHidden = "True";
	unit<UInt32>             RegioUnit                 := /Geography/RegionalUnits/RandstadIntermediatePeripheral;
	attribute<RegioUnit>     Regios      (domain)      := RegioGrids/ClaimRegions;

	container residential: isHidden = "True"
	{
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := sum(Current_situation/current_landuse/residential, RegioGrids/ClaimRegions);
		attribute<claimHa>      Claim    (RegioUnit) := rjoin(id(RegioUnit),residential_src/RstIntPer[uint32], residential_src/B1[claimHa]);
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}
	container industrial: isHidden = "True"
	{
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := sum(Current_situation/current_landuse/industrial, RegioGrids/ClaimRegions);
		attribute<claimHa>      Claim    (RegioUnit) := rjoin(id(RegioUnit),industrial_src/RstIntPer[uint32], industrial_src/B1[claimHa]);
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}
	
	container recreation: isHidden = "True"
	{
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := sum(Current_situation/current_landuse/recreation, RegioGrids/ClaimRegions);
		attribute<claimHa>      Claim    (RegioUnit) := rjoin(id(RegioUnit),recreation_src/RstIntPer[uint32], recreation_src/B1[claimHa]);
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}
	
	container nature: isHidden = "True"
	{
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := sum(Current_situation/current_landuse/nature, RegioGrids/ClaimRegions);
		attribute<claimHa>      Claim    (RegioUnit) := rjoin(id(RegioUnit),nature_src/RstIntPer[uint32], nature_src/B1[claimHa]);
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}

	container agriculture: isHidden = "True"
	{
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := sum(Current_situation/current_landuse/agriculture, RegioGrids/ClaimRegions);
		attribute<claimHa>      Claim    (RegioUnit) := rjoin(id(RegioUnit),agriculture_src/RstIntPer[uint32], agriculture_src/B1[claimHa]);
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}
	
	container buildinglot: isHidden = "True"
	{
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := sum(Current_situation/current_landuse/buildinglot, RegioGrids/ClaimRegions);
		attribute<claimHa>      Claim    (RegioUnit) := rjoin(id(RegioUnit),buildinglot_src/RstIntPer[uint32], buildinglot_src/B1[claimHa]);
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}

	container Additional_Claims // this container provides an overview of the claims for demo users that do not use administrator mode
	{
		attribute<claimHa>      residential_claim (RegioUnit) := residential/Claim;
		attribute<claimHa>      industrial_claim  (RegioUnit) := industrial/Claim;
		attribute<claimHa>      recreation_claim  (RegioUnit) := recreation/Claim;
		attribute<claimHa>      nature_claim      (RegioUnit) := nature/Claim;
		attribute<claimHa>      agriculture_claim (RegioUnit) := agriculture/Claim;
		attribute<claimHa>      buildinglot_claim (RegioUnit) := buildinglot/Claim;
	}	
}
