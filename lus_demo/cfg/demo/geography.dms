// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                 Configuration Land Use Scanner - Student Edition                     //
//                          using GeoDMS version 7.130 or newer                         //
//                                                                                      //
//                           Vrije Universiteit Amsterdam                               //
//                               July 2004 - January 2023                               //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// This DMS-file is being referred to by Demo.dms                                       //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// In this configurationfile geography (regio-partitions and distancesmatrices)         //
// is defined                                                                           //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////

container Geography: Using = "Units", isHidden = "True"
{ 
	// unit<fpoint> rdc_base : SpatialReference = "EPSG:28992", DialogData = "=Modelparameters/EnableBackgroundMap ? 'ngr_layer' : '/Geography/RegionalUnits/Province/Province_name'", Label = "rdc"; // wms achtergrondlaag voor kaarten met rd coordinaten
	unit<fpoint> rdc_base : SpatialReference = "EPSG:28992", DialogData = "ngr_layer", Label = "rdc"; // wms achtergrondlaag voor kaarten met rd coordinaten
	unit<FPoint> rdc_meter := range(rdc_base, point(300000f,0f), point(625000f,280000f));

	parameter<meter> gridsize_100m := 100[meter];
	parameter<meter> gridsize_500m := 500[meter];
	parameter<meter> x_min := 0[meter];
	parameter<meter> x_max := 280000[meter];
	parameter<meter> y_min := 300000[meter];
	parameter<meter> y_max := 625000[meter];
	
	parameter<int16> nr_cols_100m := int16((x_max - x_min) / gridsize_100m);
	parameter<int16> nr_rows_100m := int16((y_max - y_min) / gridsize_100m);
	parameter<int16> nr_cols_500m := int16((x_max - x_min) / gridsize_500m);
	parameter<int16> nr_rows_500m := int16((y_max - y_min) / gridsize_500m);
	
	unit<SPoint> rdc_500lu :=
			range(
				gridset(
					  rdc_meter
					, point(-gridsize_500m, gridsize_500m, rdc_meter)
					, point(y_max, x_min, rdc_meter)
					, spoint
				)
				,point(0s, 0s)
				, point(nr_rows_500m, nr_cols_500m)
			)
			, DialogData = "rdc_meter"
	{
		parameter<ha>     NrHaPerCell := gridsize_500m*gridsize_500m / 10000[meter2] * 1[ha];
		attribute<.>      domain_rel (domain) := id(domain)[.];
	}

	unit<SPoint> rdc_100lu :=
			range(
				gridset(
					  rdc_meter
					, point(-gridsize_100m, gridsize_100m, rdc_meter)
					, point(y_max, x_min, rdc_meter)
					, spoint
				)
				,point(0s, 0s)
				, point(nr_rows_100m, nr_cols_100m)
			)
			, DialogData = "rdc_meter"
	{
		attribute<rdc_500lu>    rdc_500lu_rel := id(.)[rdc_500lu];
		attribute<domain>       domain_rel := id(.)[domain];
		
		parameter<ha>           NrHaPerCell := gridsize_100m*gridsize_100m / 10000[meter2] * 1[ha];
	}

	#include <ngr_layer.dms>
	
	unit<uint8> Matrix : nrofrows = 10
	{
		attribute<meter> Size : [ 100, 200, 300, 500, 1000, 2500, 5000, 10000, 25000, 50000 ];
		attribute<string> name := 'pot'+string(size)+'m';
	}
	
	container Distmatrices_100m  := for_each_nex(Matrix/name, 'Distmatrices/Impl_100m/'+Matrix/name+'/PotRange', spoint);
	container Distmatrices_500m  := for_each_nex(Matrix/name, 'Distmatrices/Impl_500m/'+Matrix/name+'/PotRange', spoint);
	
	#include<Distmatrices.dms>
	
	container RegionalUnits
	{
		unit<UInt32> RandstadIntermediatePeripheral // Regional division in Randstad Intermediate zone and Peripherap zone
		:	StorageName     = "%projDir%/data/geography/claimregions_2011.shp"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	Descr           = "This entity contains the shapes of claimregions."
		{
			attribute<rdc_meter> geometry (poly);
			attribute<.>         claimregio                 : Descr = "This is the entity of shapes of claimregions (0=Exterior)";
			attribute<Meter2>    area                       := area(geometry, meter2);
			attribute<String>    Label                      : ['none','Randstad','Intermediate zone','Peripheral zone'], DialogType = "LabelText";
		}
		
		unit<UInt32> Province
		:	StorageName     = "%projDir%/data/geography/provinces_2004_simplified.shp"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	Descr           = "This entity contains the shapes of provinces. They add up to more than 12, since for example the islands are separate shapes"
		{
			attribute<rdc_meter>    geometry (poly);
			attribute<.>            prvnr           : Descr = "This is the entity of the 12 provinces in the Nederlands (0=Exterior)";
			attribute<string>       prvnm;
			attribute<string>       Province_name := prvnm;
		}
		
		container DijkringImport
		{
			unit<uint32> csv
			: StorageName = "%ProjDir%/data/DijkRingen.csv"
			, StorageType = "gdal.vect"
			{
				attribute<String> Label;
			}
			unit<uint32> shp
			: StorageName = "%projDir%/data/geography/dijkringen_2009_selection.shp"
			, StorageType = "gdal.vect"
			{
				attribute<rdc_meter> Geometry (poly);
			}
			unit<uint8> EK
			: DialogData = "DijkRing/AsciiGridCode"
			, DialogType = "Map";
		}
			
		unit<uint32> DijkRing := DijkringImport/csv, Descr      = "This is the entity of the 57 most important flood risk management zones (dike rings) in the Nederlands"
		{
			attribute<rdc_meter>          Geometry(poly) := DijkringImport/shp/Geometry[Shape_rel];
			attribute<DijkringImport/shp> Shape_rel      := rlookup(Dijkringnr, DijkringImport/shp/DijkringNr);

			attribute<DijkringImport/EK>  AsciiGridCode := DijkringImport/csv/AsciiGridCode[DijkringImport/EK];
			attribute<mEur>               MinDamage     := DijkringImport/csv/MinSchade [mEur];
			attribute<mEur>               ExpDamage     := DijkringImport/csv/ExpSchade [mEur];
			attribute<mEur>               MaxDamage     := DijkringImport/csv/MaxSchade [mEur];
			attribute<NrPersons>          ExpCasualties := DijkringImport/csv/ExpSlachtoffers [NrPersons];
			attribute<Year>               NormPeriod    := value( substr(rjoin(Dijkringnr, DijkringImport/shp/Dijkringnr, DijkringImport/shp/NormFreq), 2, 20), Year);
			
			container AnnualRisk
			{
				attribute <mEur_Yr>      Damage (RegionalUnits/DijkRing) := ExpDamage / NormPeriod;
			}
		}
	}
	
	container RegioGrids
	{
		attribute<RegionalUnits/RandstadIntermediatePeripheral> ClaimRegions (domain) := poly2grid(RegionalUnits/RandstadIntermediatePeripheral/geometry, domain);
		attribute<RegionalUnits/DijkRing>                       DijkRing     (domain) := poly2grid(RegionalUnits/DijkRing/geometry, domain);
	}
}