// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                 Configuration Land Use Scanner - Student Edition                     //
//                          using GeoDMS version 7.130 or newer                         //
//                                                                                      //
//                           Vrije Universiteit Amsterdam                               //
//                               July 2004 - January 2023                               //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////

container Templates : isHidden = "True", Using = "Geography;Classifications"
{
	#include <Allocation_Procedures.dms>

	Template _Iter_AllocatedLand
	{
		parameter<ggEndogenous> ggEndogenousID;
		unit<uint32>            Adomain;
		///
		parameter<String>       ggName                   := lookup(ggEndogenousID, ggEndogenous/Name);
		attribute<Ha>           nrHaPerCell (ADomain)    := ='demand_factor * adjusted_demands/'+ggName, Descr = "Mcj = Bc * Aj * exp(betaFactor*Scj): see formula (3'''')";
		attribute<claimHa>      nrHaPerRegio (RegioUnit) := ='sum (nrHaPerCell, CaseData/Compacted/RegioGrids/'+ggName+')', Descr = "Tj= sum ( Mcj (* intensity))";
		parameter<claimHa>      nrHaAggr                 := sum(nrHaPerRegio);
		attribute<OperatorType> Operator  (RegioUnit)    := ='Additional_Claims/'+ggName+'/Operator';
		attribute<claimHa>      Deviation (RegioUnit)    := ='nrHaPerRegio - CaseData/TotalPeriodClaims/'+ggName;
		attribute<claimHa2>     SqrDevOrg (RegioUnit)    := sqr(Deviation);
		attribute<claimHa2>     SqrDev    (RegioUnit)    := Operator == 0[OperatorType]
																? Sqr(max_elem(0[claimHa], Deviation))
																: Operator == 2[OperatorType]
																	? Sqr(min_elem(0[claimHa], Deviation))
																	: Sqr(Deviation);
	}

	Template _IterTemplate
	{
		parameter<IterRange>  i : Descr = "Nr of iterations before this iteration";

		container currValue :=
			for_each_nedv(
				  ggEndogenous/Name
				, 'exp(betaFactor * MakeDefined(Additional_Claims/' + ggEndogenous/Name +'/logAj, 0[EUR_m2]))'
				, RegioUnit
				, float32
			),	Descr = "Aj: This will be initialized with InitialWeigths and then receives a copy of nextValue (Aj) for each iteration";

		unit<uint32> ADomain := .../Compacted/ADomain;

		container adjusted_demands :=
			for_each_nedv(
				  ggEndogenous/Name
				, 'MakeDefined(CaseData/Compacted/Demands/'+ggEndogenous/Name+' * lookup(CaseData/Compacted/RegioGrids/'+ggEndogenous/Name+', currValue/'+ggEndogenous/Name+'), 0[Units/DemandUnit])'
				, ADomain
				, float32
			), Descr = "Tcj = Aj * exp(beta*Scj): new demands based on given Aj (currValue)";

		attribute<DemandUnit> total_demand  (ADomain) := ='add('+asItemList('adjusted_demands/'+ggEndogenous/Name)+')', Descr = "Tc = sum(j, Tcj): total demand on input"; // for unused land category, add "+'value(1.0, DemandUnit)'"		
		attribute<BcUnit>     demand_factor (ADomain) := CaseData/Land/FreeLand[ADomain/org_rel] / total_demand, Descr = "Bc = Lc / Tc: see formula 6a";
		
		container allocated_land := 
			for_each_ne(
				ggEndogenous/Name
				, '_Iter_AllocatedLand('+String(id(ggEndogenous))+ '[ggEndogenous], Adomain)' 
			);

		parameter<claimHa>  TotalDeviation := ='sqrt(add('+asItemList('sum(allocated_land/'+ggEndogenous/Name+'/SqrDev)')+'))', Descr = "Sum of distances between claimed and allocated sums of ha per region";
		parameter<claimHa>  AllocatedAggr  := ='add('+asItemList('allocated_land/'+ggEndogenous/Name+'/nrHaAggr')+')';
		parameter<Bool>     stop           := TotalDeviation < value(12000.0, Ha), Descr = "Stop iteration if the average deviation of the claims is less than 10 square km";

		container nextValue :=
			for_each_nedv(
				  ggEndogenous/Name
				, 'claim_corrF32(CaseData/TotalPeriodClaims/'+ggEndogenous/Name+' * currValue/'+ ggEndogenous/Name+', allocated_land/'+ggEndogenous/Name+'/nrHaPerRegio, Additional_Claims/'+ggEndogenous/Name+'/Operator)'
				, RegioUnit
				, float32
			), Descr    = "Aj' = Aj * Dj/Tj: see formula (6b')";
	}
	
	Template Claims_per_Scenario_T
	{
		parameter<string> scenario_name_short;
		///

		container per_LU_type := 
			for_each_ne(
				/Classifications/ggEndogenous/name
				, 'Templates/Claims_Per_LU_T('+quote(/Classifications/ggEndogenous/name)+', RegioGrids/ClaimRegions)'
			)
		{
			container Additional_Claims // this container provides an overview of the claims for demo users that do not use administrator mode
			{
				attribute<claimHa>      residential (RegioUnit) := ../residential/Claim;
				attribute<claimHa>      industrial  (RegioUnit) := ../industrial/Claim;
				attribute<claimHa>      recreation  (RegioUnit) := ../recreation/Claim;
				attribute<claimHa>      nature      (RegioUnit) := ../nature/Claim;
				attribute<claimHa>      agriculture (RegioUnit) := ../agriculture/Claim;
				attribute<claimHa>      buildinglot (RegioUnit) := ../buildinglot/Claim;
			}
		}
	}
	
	Template Claims_per_LU_T
	{
		parameter<string>    lu_name;
		attribute<RegioUnit> Regios (domain);
		///
		
		attribute<OperatorType> Operator (RegioUnit) := const(1, RegioUnit, OperatorType);
		attribute<EUR_M2>       logAj    (RegioUnit) := const(0, RegioUnit, Eur_m2);

		attribute<claimHa>      Current  (RegioUnit) := ='sum(Current_situation/current_landuse/'+lu_name+', RegioGrids/ClaimRegions)';
		attribute<claimHa>      Claim    (RegioUnit) := ='rjoin(id(RegioUnit),Read_CSVs/'+lu_name+'/RstIntPer[uint32], Read_CSVs/'+lu_name+'/'+scenario_name_short+'[claimHa])';
		attribute<claimHa>      Total    (RegioUnit) := Current + Claim;
	}
}
