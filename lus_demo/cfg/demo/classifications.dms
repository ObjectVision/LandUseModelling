// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//                 Configuration Land Use Scanner - Student Edition                     //
//                          using GeoDMS version 7.130 or newer                         //
//                                                                                      //
//                           Vrije Universiteit Amsterdam                               //
//                               July 2004 - January 2024                               //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// This DMS-file is being referred to by Demo.dms                                       //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// In this configurationfile classifications are defined                                //
//                                                                                      //
// ///////////////////////////////////////////////////////////////////////////////////////

container Classifications: Using = "Units", isHidden = "True"
{
	// =========== landusesTypering
	unit<uint8> ggModel: NrOfRows = 9 // @USERINPUT: keep in sync with the actual nr of model classes
	{	
		parameter<uint32> nrAttr := 16; // @USERINPUT: keep in sync with nr of Text-Element attributes in the next lines
		unit<uint32>      Elements:= Range(uint32, 0, nrAttr*#ggModel)
		{
			attribute<String> Text: [ // @USERINPUT
			//'Name',			'Label',			'Descr',			'IsExogenous',	'r','g','b',		'Claimregion',	'IsUrbaan',	'IsOpenlandscape',	'LandPrice_A1',	'LandPrice_A2',	'LandPrice_B1',	'LandPrice_B2',	'NrInhPerHa',	'MaxDamagePerHa',
			'residential',		'residential',		'residential',		'FALSE',		'225','0','0',		'RstIntPer',	'TRUE',		'FALSE',			'40',			'35',			'34',			'30',			'35',			'4',
			'industrial',		'industrial',		'industrial',		'FALSE',		'128','0','255',	'RstIntPer',	'TRUE',		'FALSE',			'36',			'31',			'32',			'28',			'0',			'6',
			'recreation',		'recreation',		'recreation',		'FALSE',		'255','228','0',	'RstIntPer',	'FALSE',	'FALSE',			'30',			'28',			'26',			'24',			'0',			'0.3',
			'nature',			'nature',			'nature',			'FALSE',		'100','192','100',	'RstIntPer',	'FALSE',	'TRUE',				'34',			'29',			'31',			'27',			'0',			'0.2',
			'agriculture',		'agriculture',		'agriculture',		'FALSE',		'192','255','128',	'RstIntPer',	'FALSE',	'FALSE',			'32',			'27',			'30',			'26',			'0',			'0.1',
			'buildinglot',		'buildinglot',		'buildinglot',		'FALSE',		'128','128','128',	'RstIntPer',	'FALSE',	'FALSE',			'30',			'28',			'26',			'24',			'0',			'1.3',
			'infrastructure',	'infrastructure',	'infrastructure',	'TRUE',			'128','0','0',		'',				'FALSE',	'FALSE',			'38',			'33',			'33',			'29',			'0',			'1.9',
			'water',			'water',			'water',			'TRUE',			'159','255','255',	'',				'FALSE',	'FALSE',			'30',			'28',			'26',			'24',			'0',			'0',
			'exterior',			'exterior',			'exterior',			'TRUE',			'255','255','228',	'',				'FALSE',	'FALSE',			'25',			'24',			'23',			'22',			'0',			'0'
			];
		}
		attribute<string>     Lnr:          = string(ID(.)+1b);
		attribute<String>     Name:         = Elements/Text[value(UInt32(ID(.))* nrAttr +  0, Elements)];
		attribute<String>     Label:        = Elements/Text[value(UInt32(ID(.))* nrAttr +  1, Elements)];
		attribute<String>     Descr:        = Elements/Text[value(UInt32(ID(.))* nrAttr +  2, Elements)];
		attribute<Bool>       IsExogenous:  = bool(Elements/Text[value(UInt32(ID(.))* nrAttr +  3, Elements)]);

		attribute<uint32>     BrushColor:   = rgb(R,G / 256,B / 256 / 256), DialogType = "BrushColor";

		unit<uint32>            ColorCoord;
		attribute<ColorCoord>   r:                = value(Elements/Text[value(UInt32(ID(.))* nrAttr +  4, Elements)], ColorCoord);
		attribute<ColorCoord>   g:                = value(Elements/Text[value(UInt32(ID(.))* nrAttr +  5, Elements)], ColorCoord)*256;
		attribute<ColorCoord>   b:                = value(Elements/Text[value(UInt32(ID(.))* nrAttr +  6, Elements)], ColorCoord)*256*256;
		attribute<String>       Claimregion:      = Elements/Text[value(UInt32(ID(.))* nrAttr +  7, Elements)];
		attribute<Bool>         IsUrban:          = bool(Elements/Text[value(UInt32(ID(.))* nrAttr + 8, Elements)]);
		attribute<Bool>         IsOpenLandscape:  = bool(Elements/Text[value(UInt32(ID(.))* nrAttr + 9, Elements)]);
		attribute<Eur_m2>       LandPrice_A1:     = value((Elements/Text[value(UInt32(ID(.))* nrAttr + 10, Elements)]), Eur_m2);
		attribute<Eur_m2>       LandPrice_A2:     = value((Elements/Text[value(UInt32(ID(.))* nrAttr + 11, Elements)]), Eur_m2);
		attribute<Eur_m2>       LandPrice_B1:     = value((Elements/Text[value(UInt32(ID(.))* nrAttr + 12, Elements)]), Eur_m2);
		attribute<Eur_m2>       LandPrice_B2:     = value((Elements/Text[value(UInt32(ID(.))* nrAttr + 13, Elements)]), Eur_m2);
		attribute<mEur_ha>      MaxDamagePerha:   = value((Elements/Text[value(UInt32(ID(.))* nrAttr + 15, Elements)]), mEUR_ha);
	}

	unit<uint8> LUclasses := Range(ggModel,uint8(0),uint8(nrofrows(ggModel)))
	{
		attribute<ggModel>      NrOrg          := convert(ID(LUclasses), ggModel);
		attribute<UInt32>       BrushColor     := lookup(NrOrg, ggModel/BrushColor), DialogType = "BrushColor";
		attribute<String>       Label          := lookup(NrOrg, ggModel/Label);
		attribute<String>       Name           := lookup(NrOrg, ggModel/Name);
		attribute<mEUR_ha>      MaxDamagePerHa := lookup(NrOrg, ggModel/MaxDamagePerHa);
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}

	// =========== landusesTypering: subtypes
	unit<uint8> ggEndogenous:= subSet(not(ggModel/IsExogenous))
	{
		attribute<String> Name         := lookup(nr_OrgEntity, ggModel/Name);
		attribute<UInt32> BrushColor   := lookup(nr_OrgEntity, ggModel/BrushColor), DialogType = "BrushColor";
		attribute<String> Label        := lookup(nr_OrgEntity, ggModel/Label), DialogType = "LabelText";
		attribute<Eur_m2> Landprice_A1 := lookup(nr_OrgEntity, ggModel/Landprice_A1);
		attribute<Eur_m2> Landprice_A2 := lookup(nr_OrgEntity, ggModel/Landprice_A2);
		attribute<Eur_m2> Landprice_B1 := lookup(nr_OrgEntity, ggModel/Landprice_B1);
		attribute<Eur_m2> Landprice_B2 := lookup(nr_OrgEntity, ggModel/Landprice_B2);
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}

	unit<uint8> ggExogenous := SubSet(ggModel/IsExogenous)
	{
		attribute<String> Name :       = lookup(nr_OrgEntity, ggModel/Name);
		attribute<UInt32> BrushColor:  = lookup(nr_OrgEntity, ggModel/BrushColor), DialogType = "BrushColor";
		attribute<String> Label:       = lookup(nr_OrgEntity, ggModel/Label),      DialogType = "LabelText";
	}
	unit<uint8> ggUrban:= SubSet(ggModel/IsUrban)
	{
		attribute<String> Name         := lookup(nr_OrgEntity, ggModel/Name);
		attribute<UInt32> BrushColor   := lookup(nr_OrgEntity, ggModel/BrushColor), DialogType = "BrushColor";
		attribute<String> Label        := lookup(nr_OrgEntity, ggModel/Label), DialogType = "LabelText";
		attribute<Bool>   IsExogenous  := lookup(nr_OrgEntity, ggModel/IsExogenous);
	}

	// ============= YesorNo
	unit<bool> YesorNo
	{
		attribute<UInt32> BrushColor : [rgb(192,192,192),rgb(255,0,0)], DialogType = "BrushColor";
		attribute<String> Label      : ['No','Yes'], DialogType = "LabelText";
	}

	// ============= LossOrGain
	unit<uint8> LossOrGain_Class: nrofrows = 3
	{
		attribute<LossOrGain> Classes     : [ -1, 0, 1 ], DialogType = "Classification";
		attribute<UInt32>     BrushColor  : [rgb(0,192,0),rgb(192,192,192),rgb(255,0,0)], DialogType = "BrushColor";
		attribute<String>     Label       : ['Loss','Stable','Gain'], DialogType = "LabelText";
	}
	
	// ============= OperatorType
	unit<uint8> OperatorType: nrofrows = 3
	{
		attribute<UInt32> BrushColor  : [rgb(192,192,192),rgb(128,0,255),rgb(255,128,255)], DialogType = "BrushColor";
		attribute<String> Label       : ['less-or-equal (max.)','equal','greater or equal (min.)'], DialogType = "LabelText";
	}

	// =========  Classifications voor Ha
	unit<uint8> landuseHaK := =ModelParameters/ModelResolution == '100m' ? 'landuseHa6K_100m' : 'landuseHa9K_500m';
	
	unit<uint8> landuseHa6K_100m : nrofrows = 6
	{
		attribute<Ha> Classes: DialogType = "Classification",
		[
			0   , 0.05,    0.1
		,	0.25, 0.5 ,  0.75
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(192,192,192),rgb(  0,  0,255),rgb( 32, 64,224)
		,	rgb( 64,128,192),rgb( 96,192,160),rgb(128,255,128)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			' 0.00 -  0.05',' 0.05 -  0.10',' 0.10 -  0.25'
		,	' 0.25 -  0.50',' 0.50 -  0.75',' 0.75 -  1.00'
		];
	}
	unit<uint8> landuseHa9K_500m : nrofrows = 9
	{
		attribute<Ha> Classes: DialogType = "Classification",
		[
			0   , 0.05,    0.1
		,	0.25, 0.5 ,  1.0
		,	2.5 , 5.0 , 10.0
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(192,192,192),rgb(  0,  0,255),rgb( 32, 64,224)
		,	rgb( 64,128,192),rgb( 96,192,160),rgb(128,255,128)
		,	rgb(170,170, 85),rgb(212, 85, 42),rgb(255,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			' 0.00 -  0.05',' 0.05 -  0.10',' 0.10 -  0.25'
		,	' 0.25 -  0.50',' 0.50 -  1.00',' 1.00 -  2.50'
		,	' 2.50 -  5.00',' 5.00 - 10.00','10.00 - 25.00'
		];
	}
	
	unit<uint8> HaChangeK := =ModelParameters/ModelResolution == '100m' ? 'HaChange11K_100m' : 'HaChange11K_500m';

	unit<uint8> HaChange11K_100m : nrofrows = 11
	{
		attribute<HaDiff> Classes: DialogType = "Classification",
		[
			 -1  , -0.75, -0.50, -0.25, -0.1, -0.001
		,	  0.001,   0.1,  0.25,  0.50, 0.75
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,  0,  0),rgb(255,104,104),rgb(255,149,149),rgb(255,206,206),rgb(255,236,236),rgb(219,219,219)
		,	rgb(200,240,200),rgb(150,200,150),rgb( 89,172, 89),rgb( 29,112, 29),rgb(  0, 64,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'-1.00 to -0.75','-0.75 to -0.50','-0.50 to -0.25','-0.25 to -0.10','-0.10 to  0   ','         0     ',
			'     0 to  0.10',' 0.10 to  0.25',' 0.25 to  0.50',' 0.50 to  0.75',' 0.75 to  1.00'
		];
	}
	unit<uint8> HaChange11K_500m : nrofrows = 11
	{
		attribute<HaDiff> Classes: DialogType = "Classification",
		[
			 -25  , -20, -15, -10, -5, -0.01
		,	  0.01,   5,  10,  15, 20
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,  0,  0),rgb(255,104,104),rgb(255,149,149),rgb(255,206,206),rgb(255,236,236),rgb(219,219,219)
		,	rgb(200,240,200),rgb(150,200,150),rgb( 89,172, 89),rgb( 29,112, 29),rgb(  0, 64,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'-25 to -20','-20 to -15','-15 to -10','-10 to  -5',' -5 to   0','     0     ',
			'  0 to   5','  5 to  10',' 10 to  15',' 15 to  20',' 20 to  25'
		];
	}
	unit<uint8> HaChange11KFlipped: nrofrows = 11
	{
		attribute<HaDiff> Classes: DialogType = "Classification",
		[
			-25   , -20,-15, -10, -5, -0.01
		,	  0.01,   5, 10,  15, 20
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(  0, 64,  0),rgb( 29,112, 29),rgb( 89,172, 89),rgb(150,200,150),rgb(200,240,200),rgb(219,219,219)
		,	rgb(255,236,236),rgb(255,206,206),rgb(255,149,149),rgb(255,104,104),rgb(255,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'-25 to -20','-20 to -15','-15 to -10','-10 to  -5',' -5 to   0','     0     ',
			'  0 to   5','  5 to  10',' 10 to  15',' 15 to  20',' 20 to  25'
		];
	}
	unit<uint8> ClaimHa9K: nrofrows = 9
	{
		attribute<claimHa> Classes: DialogType = "Classification",
		[
			     0,  5000, 10000
		,	 15000, 20000,25000
		,	 50000,100000,500000
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(192,192,192),rgb(  0,  0,255),rgb( 32, 64,224)
		,	rgb( 64,128,192),rgb( 96,192,160),rgb(128,255,128)
		,	rgb(170,170, 85),rgb(212, 85, 42),rgb(255,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'        0 -     5.000','    5.000 -    10.000','   10.000 -    15.000'
		,	'   15.000 -    20.000','   20.000 -    25.000','   25.000 -    50.000'
		,	'   50.000 -   100.000','  100.000 -   500.000',' >500.000'
		];
	}

	unit<uint8> Districts4K: nrofrows = 4
	{
		attribute <Ha> Classes: DialogType = "Classification",
		[
			-999.00, 0.01, 100.00, 250.00
		];
		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,255,255),rgb(  0,  0,255),rgb(  0,255,  0), rgb(255,  0,  0)
		];
		attribute <String> Label: DialogType = "LabelText",
		[
			"Unbuilt area","Small kernels (until 100 Ha)","Mediumsized kernels (until 250 Ha)","Large kernels (more than 250 Ha)"
		];
	}


	// =========  Classification for Monetary unit (EUR per m^2)
	unit<uint8> Eur_M2_15K: nrofrows = 15
	{
		attribute<EUR_M2> Classes: DialogType = "Classification",
		[
			-20, -10, -2, -0.01,  0.01
		,	  1,   2,  3,  4   ,  5
		,	  6,   8, 10, 15   , 25
		];

		attribute<UInt32> attribute: DialogType = "BrushColor",
		[
			rgb(  0  ,0,255),rgb(128,128,255),rgb(204,225,236),rgb(255,255,255),rgb(128,128,128) // blauw -> grijs
		,	rgb(  0,128,  0),rgb(  0,192,  0),rgb(  0,255,  0),rgb(232,232,  0),rgb(255,255,  0) // donker -> licht groen
		,	rgb(255,255,155),rgb(255,192,62),rgb(255,128,128),rgb(255,  0,  0), rgb(192,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'-20 to -10','-10 to -2',' -2 to -0','     0    ','  0 to  1'
		,	'  1 to   2','  2 to  3','  3 to  4','  4 to  5' ,'  5 to  6'
		,	'  6 to   8','  8 to 10',' 10 to 15',' 15 to 25' ,'25 to 40'
		];
	}


	// =========  Classifications for Percent
	unit<uint8> Percentage10K: nrofrows = 10
	{
		attribute<Percent> Classes: DialogType = "Classification",
		[
			 0, 10, 20, 30, 40
		,	50, 60, 70, 80, 90
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,255,255),rgb(255,229,204),rgb(255,204,153),rgb(255,178,102),rgb(255,153, 51)
		,	rgb(255,128,  0),rgb(223, 96, 32),rgb(191, 64, 64),rgb(180,  0,  0),rgb(140,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			' 0 -  10','10 -  20','20 -  30','30 -  40','40 -  50'
		,	'50 -  60','60 -  70','70 -  80','80 -  90','90 - 100'
		];
	}
	unit<uint8> Percentage13K: nrofrows = 13
	{
		attribute<Percent> Classes: DialogType = "Classification",
		[
			 0,  10,  20,  30, 40
		,	50,  60,  70,  80
		,	90, 100, 120, 150
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,255,255),rgb(255,229,204),rgb(255,204,153),rgb(255,178,102),rgb(255,153, 51)
		,	rgb(255,128,  0),rgb(223, 96, 32),rgb(191, 64, 64),rgb(180,  0,  0)
		,	rgb(120,  0,  0),rgb( 60,  0,  0),rgb(120,  0,128),rgb(255,  0,200)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			' 0 -  10','10 -  20','20 -  30','30 -  40','40 -  50'
		,	'50 -  60','60 -  70','70 -  80','80 -  90'
		,	'90 - 100','100- 120','120- 150','150- 200'
		];
	}
	unit<uint8> Ratio10K: nrofrows = 10
	{
		attribute<Ratio> Classes: DialogType = "Classification",
		[
			0   , 0.0001, 0.15, 0.30, 0.45
		,	0.60, 0.75  , 0.90, 1.00, 1.05
		];

		attribute<uint32> Palette: DialogType = "BrushColor",
		[
			rgb(218,218,218),rgb(255,255,204),rgb(255,255,128),rgb(255,230,102),rgb(255,179, 51)
		,	rgb(255,128,  0),rgb(255, 51,  0),rgb(230, 25,  0),rgb(200,  0,  0),rgb(153,  0, 0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			' 0 '        , '0    - 0.15', '0.15 - 0.30', '0.30 - 0.45', '0.45 - 0.60'
		,	'0.60 - 0.75', '0.75 - 0.90', '0.90 - 1.00', '1.00 - 1.05', '> 1.05'
		];
	}

	unit<uint8> Ratio6K: nrofrows = 6
	{
		attribute<Ratio> Classes: DialogType = "Classification",
		[
			0   , 0.75, 0.9
		,	0.95, 1.0 , 1.05
		];

		attribute<uint32> Palette: DialogType = "BrushColor",
		[
			rgb(218,218,218),rgb(255,255,204),rgb(255,255,128)
		,	rgb(255, 51,  0),rgb(230,  0,  0),rgb(153,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			' 0 '       , '0    - 0.75', '0.75 - 0.90'
		,	'0.95 - 1.0', '1.0 - 1.05' , '> 1.05'
		];
	}

	// =========  Classification for Potentiaal (dimensionless)
	unit<uint8> Potentiaal10K: nrofrows = 10
	{
		attribute<Potentiaal> Classes: DialogType = "Classification",
		[
			0  , 0.1, 0.2, 0.3, 0.4
		,	0.5, 0.6, 0.7, 0.8, 0.9
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(192,192,192),rgb(  0,  0,255),rgb(  0, 64,192),rgb(  0,128,128),rgb(  0,192, 64)
		,	rgb(  0,255,  0),rgb( 64,192,  0),rgb(128,128,  0),rgb(192, 64,  0),rgb(255,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'0.00 - 0.10','0.10 - 0.20','0.20 - 0.30','0.30 - 0.40','0.40 - 0.50'
		,	'0.50 - 0.60','0.60 - 0.70','0.70 - 0.80','0.80 - 0.90','0.90 - 1.00'
		];
	}

	// =========  Classification for ValuationRange (-5 to 5, unitless)
	unit<uint8> ValuationRange10K: nrofrows = 10
	{
		attribute<ValuationRange> Classes: DialogType = "Classification",
		[
			-4, -3, -2, -1, 0
		,	 1,  2,  3,  4, 5
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,  0,  0),rgb(239, 48, 48),rgb(223, 96, 96),rgb(208,144,144),rgb(192,192,192)
		,	rgb(154,179,154),rgb(115,166,115),rgb( 77,154, 77),rgb( 38,141, 38),rgb(  0,128,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'Strongly negative','Strongly negative','Negative'         ,'Weakly negative'       ,'Insign. neg/pos'
		,	'Weakly positive'  ,'Positive'         ,'Strongly positive','Very strongly positive','Very strongly positive'
		];
	}

	// =========  Classification for distances in km
	unit<uint8> km_7k: nrofrows = 8
	{
		attribute<km> Classes: DialogType = "Classification",
		[
			  0,  5, 10, 15
			,30, 50, 75,100
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(  0,  0,255),rgb( 85, 85,170),rgb(170,170, 85),rgb(255,255,  0)
		,	rgb(255,204,  0),rgb(255,153,  0),rgb(255,102,  0),rgb(192,192,192)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			'0 to 5'  ,'5 to 10' ,'10 to 15' ,'15 to 30'
		,	'30 to 50','50 to 75','75 to 100','None'];
	}
	
	// =========  Classification for heights in m
	unit<uint8> Altitude8K: nrofrows = 8
	{
		attribute<Meter> Classes: DialogType = "Classification",
		[
			-100,  -5, -2,  0
		,	    5, 10, 20, 40
		];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
		[
			rgb(255,255,198),rgb(255,255, 99),rgb(242,212, 82),rgb(229,170, 66)
		,	rgb(215,127, 49),rgb(202, 85, 33),rgb(189, 42, 16),rgb(176,  0,  0)
		];

		attribute<String> Label: DialogType = "LabelText",
		[
			   '< -5','-5 to -2.5','-2.5 to 0','0 to 5'
		,	'5 to 10','10 to 20'  ,'20 to 40' ,'40 to 325'
		];
	}

	// =========  Classification for depth in m
		unit<uint8> Diepte8K: nrofrows = 8
	{
		attribute<Meter> Classes: DialogType = "Classification",
		[
			-100, 0.001, 1, 2
		,	   3, 4    , 5, 6
		];

		attribute<uint32> Palette: DialogType = "Palette",
		[
			rgb(192,192,192),rgb(255,255, 99),rgb(242,212,82),rgb(229,170, 66)
		,	rgb(215,127, 49),rgb(202, 85, 33),rgb(189, 42,16),rgb(176,  0,  0)
		];

		attribute<String> Label: DialogType = "Labels",
		['No water','0 to 1','1 to 2','2 to 3','3 to 4','4 to 5','5 to 6','6 and more'];	
	}

	// =========== Classification for Landscape quality

	unit<uint8> Ls_Qual2k: nrofrows = 2
	{
		attribute<Ls_QualPress2k> Classes: DialogType = "Classification",
			[0, 2];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
			[rgb(255,255,198),rgb(0,215,0)];

		attribute<String> Label: DialogType = "LabelText",
			['Low','High'];
	}
	unit<uint8> Ls_Qual4K: nrofrows = 5
	{
		attribute<Ls_Qual4k> Classes: DialogType = "Classification",
			[0, 1, 2, 3, 4];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
			[rgb(192,192,192), rgb(255,255,198),rgb(255,255,0),rgb(0,215,0),rgb(0,70,0)];

		attribute<String> Label: DialogType = "LabelText",
			['No quality (e.g. urban)', 'Low quality','Moderate quality','High quality','Very high quality'];
	}

	// =========== Classification for pressure on Landscape quality
	unit<uint8> Ls_QualPress2k: nrofrows = 2
	{
		attribute<Ls_QualPress2K> Classes: DialogType = "Classification",
			[0, 2];

		attribute<UInt32> BrushColor: DialogType = "BrushColor",
			[rgb(1,229,49),rgb(246,58,0)];

		attribute<String> Label: DialogType = "LabelText",
			['Low','High'];
	}

	// =========  Classification for Earthquake risk
	unit<uint8> Mercalli3K: nrofrows = 4
	{
		attribute <Mercalli3K> Classes: DialogType = "Classification",
			[0.0, 6.0, 6.5, 7.0];
		attribute<UInt32> BrushColor: DialogType = "BrushColor",
			[rgb(192,192,192),rgb(255,255,0),rgb(255,128,0),rgb(255,0, 0)];
		attribute <String> Label: DialogType = "LabelText",
			[' 0',' 6.0',' 6.5',' 7.0'];
	}
}
