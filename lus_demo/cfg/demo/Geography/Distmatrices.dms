container Distmatrices // := for_each_nex(Matrix/name, 'Impl/'+Matrix/name+'/PotRange', spoint)
{
	unit<uint32> Dist2Range;
	
	template potrange
	{
		parameter<meter>   gridgrootte;
		parameter<meter>   afkapstraal;
		parameter<float32> straal  := afkapstraal / gridgrootte;
		parameter<float32> oppervlakte  := pi()[float32] * straal^2[float32];
		
		unit<spoint> tmpRange:= range(spoint, point(-int16(straal), -int16(straal)), point(int16(straal) + 1s, int16(straal) + 1s));
		unit<spoint> potRange:= tmpRange // TODO 2017-09-26: remove indirection & clean-up
		{
			attribute<Dist2Range> distMatr := dist2(point(0s, 0s, tmpRange), Dist2Range);
			attribute<float32> dist := sqrt(float32(distMatr));
			attribute<float32> dist_scaled := dist / straal;
			
			attribute<float32> rev_dist        := max_elem(straal - dist, 0f);
			parameter<float32> rev_dist_max    := max(rev_dist);
			attribute<float32> rev_dist_scaled := rev_dist / rev_dist_max;
			attribute<float32> AbsWeight :=
				distMatr[float32] <= (straal * straal) ?
					distMatr[float32] != 0f ?
						1f / (distMatr[float32] ^ 2f) :
						1f :
					0f;
			
			attribute<float32> AbsWeight_ln :=
				distMatr[float32] <= (straal * straal) ?
					distMatr[float32] != 0f ?
						1f / (distMatr[float32] / straal) :
						1f :
					0f;
			
			attribute<Float32> RelWeight         := scalesum(     AbsWeight , 1.0f );
			attribute<Float32> RelWeightSqrt     := scalesum(Sqrt(AbsWeight), 1.0f );
			// attribute<Float32> Flat              := distMatr <= straal[uint32] ? 1f : 0f;
			// attribute<Float32> Flat2             := dist <= straal ? 1f : 0f;
			attribute<Float32> Flat2             := Float32(distMatr <= uint32(straal * straal));

			attribute<Float32> Flat_Visualisatie := dist <= 1.5f ? 1f : 0f;
			attribute<float32> neighbourhood     := distMatr > 0 ? 1f : 0f;

			parameter<float32> oppervlakte     := sum(Flat2);
			attribute<float32> binair          := distMatr <= 100 ? 1f : 0f;
			
			
			attribute<Potentiaal> AbsWeight_demo     := float32(distMatr) <= (straal * straal + straal) ? 1f / (float32(distMatr) + 2f) : 0f;
			attribute<Potentiaal> RelWeight_demo     := scalesum(AbsWeight_demo, Float32(1.0) );
			attribute<Potentiaal> RelWeightSqrt_demo := scalesum(Sqrt(AbsWeight_demo), Float32( 1.0) );
			
			
			
		}
	}

	container Impl_100m := for_each_ne(Matrix/name, 'potrange(100[meter],'+string(Matrix/size)+'[meter])');
	container Impl_500m := for_each_ne(Matrix/name, 'potrange(500[meter],'+string(Matrix/size)+'[meter])');
}