//**********************************************************************************************************************************************************************************************
//**                                                                                                                                                                                          **
//**                                                Configuration written for Suriname Land Use Modelling project, 2012                                                                       **
//**                                                                                                                                                                                          **
//**********************************************************************************************************************************************************************************************
//**                                                                                                                                                                                          **
//**                                                            Configuration file with classifications                                                                                       **
//**                                                                                                                                                                                          **
//**********************************************************************************************************************************************************************************************

container Classifications: Using = "Units", KeepData = "True"
{
	unit<uint8> m_elevation: nrofrows = 10
	{
		attribute<m> ClassBreaks: DialogType = "Classification",
			[  0,  20,  50, 100, 150,
			 200, 250, 300, 400, 500];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0),rgb(153,230,  0),rgb(204,242,  0),
			 rgb(255,255,  0),rgb(255,191,  0),rgb(255,128,  0),rgb(255,064,  0),rgb(255,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['    0 ..   20 m','  20 ..   50 m','  50 .. 100 m','100 .. 150 m','150 .. 200 m',
			 '200 .. 250 m'   ,'250 .. 300 m'  ,'300 .. 400 m' ,'400 .. 500 m','>= 500 m '];
	}
	unit<uint8> degrees_slope: nrofrows = 10
	{
		attribute<degrees> ClassBreaks: DialogType = "Classification",
			[0  , 0.5, 1  , 1.5, 2  ,
			 2.5, 3  , 3.5, 4  , 4.5];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0),rgb(153,230,  0),rgb(204,242,  0),
			 rgb(255,255,  0),rgb(255,191,  0),rgb(255,128,  0),rgb(255, 64,  0),rgb(255,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['0.0 ..0.5','0.5 .. 1.0','1.0 .. 1.5','1.5 .. 2.0','2.0 - 2.5',
			 '2.5   3.0','3.0 .. 3.5','3.5 .. 4.0','4.0 .. 4.5','>= 4.5'];
	}
	unit<uint8> m_dist: nrofrows = 10
	{
		attribute<m> ClassBreaks: DialogType = "Classification",
			[   0, 1000, 2000, 3000,  4000,
			 5000, 6000, 7000, 8000, 10000];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0),rgb(153,230,  0),rgb(204,242,  0),
			 rgb(255,255,  0),rgb(255,191,  0),rgb(255,128,  0),rgb(255, 64,  0),rgb(255,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['0 .. 1 km','1 .. 2 km','2 .. 3 km','3 .. 4 km','4 .. 5 km',
			 '5 .. 6 km','6 .. 7 km','7 .. 8 km','8 .. 10km','>=10 km'];
	}
	unit<uint8> second_12K: nrofrows = 12
	{
		attribute<s> ClassBreaks: DialogType = "Classification",
			[   0,   900,  1800,  2400,  3600,
			 7200, 10800, 18000, 28800, 57600,
			 115200,230400];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0),rgb(153,230,  0),rgb(204,242,  0),
			 rgb(255,255,  0),rgb(255,191,  0),rgb(255,128,  0),rgb(255, 64,  0),rgb(255,  0,  0),
			 rgb(128,  0,  0),rgb( 64,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['0   - 0.15 hr','0.15 - 0.5 hr','0.5 - 0.75 hr','0.75 - 1.0 hr','1.0 - 2.0 hr',
			 '2   - 3    hr','3 - 5 hr','5 - 8 hr','1 - 2 day','2 - 4 day',
			 '4 -8 day','>=8 day'];
	}
	unit<uint8> dollar_10K: nrofrows = 10
	{
		attribute<dollar> ClassBreaks: DialogType = "Classification",
			[   0,  10,  50, 100,  200,
			  300, 400, 500, 750, 1000];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(255,  0,  0),rgb(255, 64,  0),rgb(255,128,  0),rgb(255,191,  0),rgb(255,255,  0),
			 rgb(204,242,  0),rgb(153,230,  0),rgb(102,217,  0),rgb( 51,205,  0),rgb(  0,192,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['    0 -    10 $','  10 -   50 $','  50 - 100 $','100 - 200 $','200 - 300 $',
			 '300 - 400 $'    ,'400 - 500 $'  ,'500 - 750 $' ,'750 - 999','>=10000 $'];
	}
	unit<uint8> impedance_10K: nrofrows = 10
	{
		attribute<impedance> ClassBreaks: DialogType = "Classification",
			[   0,  10,  50, 100,  200,
			  300, 400, 500, 750, 1000];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(255,  0,  0),rgb(255, 64,  0),rgb(255,128,  0),rgb(255,191,  0),rgb(255,255,  0),
			 rgb(204,242,  0),rgb(153,230,  0),rgb(102,217,  0),rgb( 51,205,  0),rgb(  0,192,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['    0 -    10','  10 -   50','  50 - 100','100 - 200','200 - 300',
			 '300 - 400'    ,'400 - 500'  ,'500 - 750' ,'750 - 999','>=10000'];
	}
	
	unit<uint8> mining_classes: nrofrows = 4
	{
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(75,75,75),rgb(255,204,0),rgb(255,204,0),rgb(100,100,100)];
		attribute<string> Label: DialogType = "LabelText",
			['Bauxiet','Goud','Porknokker','OutlinesToBeFilled'];
		attribute<uint32> EK: 
			[47,246,251,0];
	}

	unit<bool> YesNo
	{
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(255,255,255),rgb(100,100,255)];
		attribute<string> Label: DialogType = "LabelText",
			['No','Yes'];
	}
	unit<bool> YesNoGreen
	{
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(255,255,255),rgb(0,200,0)];
		attribute<string> Label: DialogType = "LabelText",
			['No','Yes'];
	}
	unit<bool> YesNoRed
	{
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(255,255,255),rgb(255,0,0)];
		attribute<string> Label: DialogType = "LabelText",
			['No','Yes'];
	}

	unit<uint8> ratio_10K: nrofrows = 10
	{
		attribute<ratio> ClassBreaks: DialogType = "Classification",
			[0.00, 0.05, 0.10, 0.15, 0.20,
			 0.25, 0.30, 0.40, 0.60, 0.80];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0),rgb(153,230,  0),rgb(204,242,  0),
			 rgb(255,255,  0),rgb(255,191,  0),rgb(255,128,  0),rgb(255, 64,  0),rgb(255,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['  0 -   5 %','  5 - 10 %','10 - 15 %','15 - 20 %','20 - 25 %',
			 '25 - 30 %'  , '30 - 40 %','40 - 60 %','60 - 80 %',' >= 80%'];
	}
	unit<uint8> dollar_ha_11K: nrofrows = 11
	{
		attribute<dollar_ha> ClassBreaks: DialogType = "Classification",
			[   0, 1000, 3000, 3200, 3500, 3800, 
			 4200, 4500, 5000, 5500, 6000];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(  0,192,  0),rgb( 51,205,  0),rgb(102,217,  0),rgb(153,230,  0),rgb(204,242,  0),rgb(255,255,  0),
			 rgb(255,191,  0),rgb(255,128,  0),rgb(255, 64,  0),rgb(255,  0,  0),rgb(128,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['       0 ..   1000','1000 ..  3000','3000 ..  3200','3200 ..  3500','3500 ..  3800','3800 ..  4200',
			 '4200 ..  4500'     ,'4500 ..  5000','5000 ..  5500','5500 ..  6000','>= 6000'];
	}
	unit<uint8> dollar_ha_14K: nrofrows = 14
	{
		attribute<dollar_ha> ClassBreaks: DialogType = "Classification",
			[   -5000, 0, 500, 1000, 1500, 2000, 2500, 
			 30000, 3500, 4000, 4500, 5000, 5500, 6000];
		attribute<uint32> BrushColor:  DialogType = "BrushColor",
			[rgb(10,130,10),rgb(  0,172,  0), rgb(  42,192,  0),rgb( 84,205,  0),rgb(126,217,  0),rgb(168,230,  0),rgb(210,242,  0),rgb(255,255,  0),
			 rgb(255,191,  0),rgb(255,128,  0),rgb(255, 100, 0) ,rgb(255, 64,  0),rgb(255,  0,  0),rgb(128,  0,  0)];
		attribute<string> Label: DialogType = "LabelText",
			['         < 0', '   0 ..   500',' 500 ..  1000','1000 ..  1500',
			 '1500 ..  2000','2000 ..  2500','2500 ..  3000','3000 ..  3500',
			 '3500 ..  4000','4000 ..  4500','4500 ..  5000','5000 ..  5500',
			 '5500 ..  6000','>= 6000'];
	}
	unit<uint8> soiltypes: nrofrows = 9
	{
		attribute<string> name: 
			['ACh',
			 'ARa',
			 'FRh',
			 'FRx',
			 'GLu',
			 'HSf',
			 'LPd',
			 'PTa',
			 'WR'
			];
		attribute<string> label_fao:
			['Haplic Acrisols',
			 'Albic Arenosols',
			 'Haplic Ferralsols',
			 'Xanthic Ferralsols',
			 'Umbric Gleysol',
			 'Fibric Histosols',
			 'Dystric Leptosols',
			 'Albic Plinthosols',
			 'Water'
			];
		attribute<string> Descr:
			['klei zuur',
			 'zand',
			 'mineraalrijk',
			 'geel mineraalrijk',
			 'natte bodem',
			 'organisch',
			 'dunne bodem op steenondegrond',
			 'ijzerrijke klei',
			 'water'
			];
		attribute<string> Label:
			Expr       = "name + ': ' + Descr",
			DialogType = "LabelText";
			
		container orgLU
		{
			//                                                   ACh   ,ARa   ,FRh   ,FRx   ,GLu   ,HSf   ,LPd   ,PTa   ,WR
			attribute<ratio> landbouw_zwerf        (soiltypes): [0.202 ,0.067 ,0.396 ,0.253 ,0.025 ,0.015 ,0     ,0.041 ,0.003];
			attribute<ratio> bebouwd               (soiltypes): [0.006 ,0     ,0.013 ,0     ,0.962 ,0     ,0     ,0.019 ,0    ];
			attribute<ratio> landbouw_grootschalig (soiltypes): [0     ,0.609 ,0     ,0     ,0.217 ,0     ,0     ,0.174 ,0    ];
			attribute<ratio> landbouw_kleinschalig (soiltypes): [0     ,0     ,0     ,0     ,0.969 ,0     ,0     ,0.031 ,0    ];
			attribute<ratio> landbouw_nat          (soiltypes): [0     ,0     ,0     ,0     ,1     ,0     ,0     ,0     ,0    ];
			attribute<ratio> bos                   (soiltypes): [0.235 ,0.043 ,0.343 ,0.331 ,0.01  ,0.003 ,0.011 ,0.021 ,0.003];
			attribute<ratio> moeras_savanne_bos    (soiltypes): [0.057 ,0.008 ,0.421 ,0.076 ,0.210 ,0.139 ,0.024 ,0.063 ,0    ];
			attribute<ratio> open_gebied           (soiltypes): [0.158 ,0.126 ,0.485 ,0.003 ,0.024 ,0.034 ,0     ,0.171 ,0    ];
		}
		container theory
		{
			//                                                   ACh   ,ARa   ,FRh   ,FRx   ,GLu   ,HSf   ,LPd   ,PTa   ,WR
			attribute<ratio> landbouw_zwerf        (soiltypes): [1     ,0.5   ,0.5   ,0.5   ,-1  ,-1      ,-0.5  ,-1    ,0    ];
			attribute<ratio> bebouwd               (soiltypes): [0     ,0     ,0     ,0     ,0     ,0     ,0     ,0     ,0    ];
			attribute<ratio> landbouw_grootschalig (soiltypes): [-1    ,-1    ,-0.5  ,-0.5  ,0.5   ,-1    ,-0.5  ,-1    ,0    ];
			attribute<ratio> landbouw_kleinschalig (soiltypes): [0     ,-0.5  ,0     ,0     ,0.5   ,-1    ,0     ,0     ,0    ];
			attribute<ratio> landbouw_nat          (soiltypes): [-1    ,-1    ,-1    ,-1    ,1     ,-0.5  ,-1    ,-0.5  ,0    ];
			attribute<ratio> bos                   (soiltypes): [0     ,0.4   ,0.4   ,0.4   ,0     ,0     ,0.4   ,0     ,0    ];
			attribute<ratio> moeras_savanne_bos    (soiltypes): [0     ,0     ,0     ,0     ,0     ,0     ,0     ,0     ,0    ];
			attribute<ratio> open_gebied           (soiltypes): [0     ,0     ,0     ,0     ,0     ,0     ,0     ,0     ,0    ];
		}
		
		container total: expr=
			"for_each_nedv("
				"  /Classifications/LU/luEndogenous/name"
				", 'orgLU/' + /Classifications/LU/luEndogenous/name + ' + theory/' + /Classifications/LU/luEndogenous/name"
				", soiltypes"
				", ratio"
			")";	
		
		attribute<uint32> BrushColor:DialogType = "BrushColor",
			[rgb(254,172,0),rgb(248,180,130),rgb(218,9,5),rgb(218,198,0),rgb(1,129,252),rgb(155,156,219),rgb(210,210,211),rgb(147,174,46),rgb(  0,  0,255)];
		attribute<uint32> PenColor:expr = "BrushColor", DialogType = "PenColor";
	}
	container LU
	{
		unit<uint8> AgrLanduseCode: nrofrows = 13
		{
			attribute<string> Label: DialogType = "LabelText",
			[
				'Overig',
				'Overig',
				'Landbouw/ Veeteeltbedrijven',
				'Gemechaniseerde rijstcultuur',
				'Oud gemechaniseerde rijstcultuur',
				'Woongebied',
				'Aquacultuur',
				'Bevolkingslandbouw',
				'Grasland',
				'Zelfvoorzienende (marginaal) agrarische bedrijven',
				'Tuinbedrijven',
				'Ondernemingslandbouw (bananen)',
				'Zwerflandbouw'
			];
			attribute<string> Name: DialogType = "LabelText",
			[
				'Overig',
				'Overig',
				'Landbouw_Veeteeltbedrijven',
				'Gemechaniseerde_rijstcultuur',
				'Oud_gemechaniseerde_rijstcultuur',
				'Woongebied',
				'Aquacultuur',
				'Bevolkingslandbouw',
				'Grasland',
				'Zelfvoorzienende_marginaal_agrarische_bedrijven',
				'Tuinbedrijven',
				'Ondernemingslandbouw_bananen',
				'Zwerflandbouw'
			];

			attribute<UInt32>  code_source: [0,0,55,2,189,255,249,246,56,8,253,251,62];

			attribute<UInt32> Color: DialogType = "BrushColor",
			[
				rgb(200,200,200),rgb(200,200,200),rgb(  0,100,  0),rgb(255,128,153),rgb(255,128,  0),rgb(255,  0,  0),
				rgb(  0,  0,255),rgb(153, 51,  0),rgb(  0,255,  0),rgb(155,204,  0),rgb(255,155,155),rgb(255,255,  0),
				rgb(204,255,204)
			];
			attribute<luModel> luModelnr:
			[
				0,0,4,5,5,2,
				5,4,4,4,3,3,
				1
			];
		}
		unit<uint8> VegLanduseCode: nrofrows = 16
		{
			parameter<uint32> nrAttr: expr = "6", isHidden = "True";
			unit<UInt32> elements: expr = "Range(uint32, 0, nrAttr*#VegLanduseCode)", isHidden = "True"
			{
				attribute<String> Text: [ // @USERINPUT
				//code_source, Label                                                      ,   R,    G,    B,  luModelnr
					   '0','NoData'                                                       ,'255','255','255','0'
					,  '6','Shifting_cultivation'                                         ,  '0','128','128','1'
					,  '8','Mangrove / creek forest'                                      ,'192','220','192','6'
					,  '9','Open To closed palm marsh forest'                             ,'165','202','240','7'
					, '15','Tree_plantation'                                              ,'224', '32',  '0','3'
					, '55','Beach and littoral woodland'                                  ,'224','192',  '0','6'
					, '62','Predominantly mesophytic high dryland forest'                 ,'192','224',  '0','6'
					,'109','Savanna forest'                                               ,'160','160', '64','8'
					,'164','High swamp forest'                                            ,'128','128','128','7'
					,'190','Low to medium tall mesophytic forest, mainly on ferrote caps' ,'192','224','128','6'
					,'233','Marsh forest / low, open scrub and liana forest'              , '32','160','192','7'
					,'239','bos'                                                          , '40', '60',  '0','6'
					,'240','landbouw kleinschalig',                                       '   0','255',  '0','4'
					,'246','Mixed marsh forest and mesophytic high dryland forest'        ,'255','251','240','7'
					,'247','Low swamp forest'                                             ,'160','160','164','7'
					,'251','Grass-, fern- and peat swamp'                                 ,'255','255',  '0','7'
				];
			}

			attribute<UInt32>  code_source: expr = " uint32(Elements/Text[value(uint32(id(VegLanduseCode)) * nrAttr + 0, elements)])";
			attribute<String>  label:       expr = "        Elements/Text[value(uint32(id(VegLanduseCode)) * nrAttr + 1, elements)]", DialogType = "LabelText";
			attribute<UInt32>  r:           expr = " uint32(Elements/Text[value(uint32(id(VegLanduseCode)) * nrAttr + 2, elements)])";
			attribute<UInt32>  g:           expr = " uint32(Elements/Text[value(uint32(id(VegLanduseCode)) * nrAttr + 3, elements)])";
			attribute<UInt32>  b:           expr = " uint32(Elements/Text[value(uint32(id(VegLanduseCode)) * nrAttr + 4, elements)])";
			attribute<UInt32>  Color:       expr = "rgb(R,G,B)", DialogType = "BrushColor";
			attribute<luModel> luModelnr:   expr = "  value(Elements/Text[value(uint32(id(VegLanduseCode)) * nrAttr + 5, elements)],luModel)";
		}
		unit<uint8> luModel: nrofrows = 11, KeepData = "True"
		{
			parameter<uint32> nrAttr: expr = "13", isHidden = "True";
			unit<UInt32> elements: expr = "Range(uint32, 0, nrAttr*#VegLanduseCode)", isHidden = "True"
			{
				attribute<String> Text: [ // @USERINPUT
				// label                          , name                          ,     r,    g,    b, rgrey, ggrey, bgrey, travelcostorg, travelcost, traveltime,IsEndogenous, HoofdKlasse
				  'overig'                        ,'overig'                       , '255','255','255', '255', '255', '255',       '99999',     '2',      '180',     'False',    '0'
				 ,'landbouw zwerf'                ,'landbouw_zwerf'               , '204','255','204', '200', '200', '200',           '5',     '1',      '180',     'True',     '2'
				 ,'bebouwd'                       ,'bebouwd'                      , '200',  '0',  '0', '100', '100', '100',           '1',     '0.05',    '45',     'True',     '1'
				 ,'landbouw grootschalig'         ,'landbouw_grootschalig'        ,   '0','128',  '0', '200', '200', '200',          '10',     '0.05',   '200',     'True',     '2'
				 ,'landbouw kleinschalig'         ,'landbouw_kleinschalig'        ,   '0','255',  '0', '200', '200', '200',          '20',     '0.05',   '240',     'True',     '2'
				 ,'landbouw nat'                  ,'landbouw_nat'                 , '168','168','255', '200', '200', '200',          '20',     '0.05',   '240',     'True',     '2'
				 ,'bos'                           ,'bos'                          ,  '40', '60',  '0', '140', '140', '140',          '40',     '2',      '260',     'True',     '3'
				 ,'moeras & savanne bos'          ,'moeras_savanne_bos'           , '192','224','128', '140', '140', '140',         '100',     '2',      '300',     'True',     '3'
				 ,'open gebied'                   ,'open_gebied'                  , '255','255','128', '255', '255', '255',           '4',     '0.4',    '180',     'True',     '4'
				 ,'water'                         ,'water'                        ,   '0',  '0','255', '255', '255', '255',          '40',     '0.2',    '240',     'False',    '5'
				 ,'buitenland'                    ,'buitenland'                   , '230','230','230', '255', '255', '255',       '99990',     '2',      '220',     'False',    '6'
				];
			}

			attribute<string>       Label:          expr = "        Elements/Text[value(uint32(id(luModel)) * nrAttr + 0, elements)]", DialogType = "LabelText";
			attribute<string>       Name:           expr = "        Elements/Text[value(uint32(id(luModel)) * nrAttr + 1, elements)]";
			attribute<UInt32>       r:              expr = " uint32(Elements/Text[value(uint32(id(luModel)) * nrAttr + 2, elements)])";
			attribute<UInt32>       g:              expr = " uint32(Elements/Text[value(uint32(id(luModel)) * nrAttr + 3, elements)])";
			attribute<UInt32>       b:              expr = " uint32(Elements/Text[value(uint32(id(luModel)) * nrAttr + 4, elements)])";
			attribute<UInt32>       rgrey:          expr = " uint32(Elements/Text[value(uint32(id(luModel)) * nrAttr + 5, elements)])";
			attribute<UInt32>       ggrey:          expr = " uint32(Elements/Text[value(uint32(id(luModel)) * nrAttr + 6, elements)])";
			attribute<UInt32>       bgrey:          expr = " uint32(Elements/Text[value(uint32(id(luModel)) * nrAttr + 7, elements)])";
			attribute<UInt32>       Color:          expr = "rgb(r,g,b)"            , DialogType = "BrushColor";
			attribute<UInt32>       ColorGrey:      expr = "rgb(rgrey,ggrey,bgrey)", DialogType = "BrushColor";
			attribute<dollar>       TravelCostOrg:  expr = "  value(Elements/Text[value(uint32(id(luModel)) * nrAttr + 8, elements)], dollar)";
			attribute<impedance>    TravelCost:     expr = "  value(Elements/Text[value(uint32(id(luModel)) * nrAttr + 9, elements)], impedance)";
			attribute<s>            TravelTime:     expr = "  value(Elements/Text[value(uint32(id(luModel)) * nrAttr + 10, elements)], s)";
			attribute<bool>         IsEndogenous:   expr = "   bool(Elements/Text[value(uint32(id(luModel)) * nrAttr + 11, elements)])";
			attribute<Hoofdklassen> Hoofdklassennr: expr = "   value(Elements/Text[value(uint32(id(luModel)) * nrAttr + 12, elements)],Hoofdklassen)";

			attribute<luModel> nr:            expr = "id(luModel)";
			attribute<string>  id_str:        expr = "String(nr)";

			parameter<.> overig:               [0];
			parameter<.> landbouw_zwerf:       [1];
			parameter<.> bebouwd:              [2];
//			parameter<.> suburbaan:            [3];
			parameter<.> landbouw_grootschalig:[3];
			parameter<.> landbouw_kleinschalig:[4];
			parameter<.> landbouw_nat:         [5];
			parameter<.> bos:                  [6];
			parameter<.> moeras_savanne_bos:   [7];
			parameter<.> open_gebied:          [8];
			parameter<.> water:                [9];
			parameter<.> buitenland:           [10];
		}
		unit<uint8> HoofdKlassen: nrofrows = 7, KeepData = "True"
		{
			parameter<uint32> nrAttr: expr = "5", isHidden = "True";
			unit<UInt32> elements: expr = "Range(uint32, 0, nrAttr*#HoofdKlassen)", isHidden = "True"
			{
				attribute<String> Text: [ // @USERINPUT
				// label        , name         ,     r,    g,    b
				  'overig'      ,'overig'      , '255','255','255'
				 ,'bebouwd'     ,'bebouwd'     , '200',  '0',  '0'
				 ,'landbouw'    ,'landbouw'    ,   '0','255',  '0'
				 ,'bos'         ,'bos'         ,  '40', '60',  '0'
				 ,'open gebied' ,'open_gebied' , '255','255','128'
				 ,'water'       ,'water'       ,   '0',  '0','255'
				 ,'buitenland'  ,'buitenland'  , '230','230','230'
				];
			}

			attribute<string>  Label: expr = "        Elements/Text[value(uint32(id(.)) * nrAttr + 0, elements)]", DialogType = "LabelText";
			attribute<string>  Name:  expr = "        Elements/Text[value(uint32(id(.)) * nrAttr + 1, elements)]";
			attribute<UInt32>  r:     expr = " uint32(Elements/Text[value(uint32(id(.)) * nrAttr + 2, elements)])";
			attribute<UInt32>  g:     expr = " uint32(Elements/Text[value(uint32(id(.)) * nrAttr + 3, elements)])";
			attribute<UInt32>  b:     expr = " uint32(Elements/Text[value(uint32(id(.)) * nrAttr + 4, elements)])";
			attribute<UInt32>  Color: expr = "rgb(r,g,b)"            , DialogType = "BrushColor";
		}
		unit<uint8> luEndogenous: expr = "Subset(luModel/IsEndogenous)"
		{
			attribute<string> Name:   expr = "luModel/Name[nr_OrgEntity]";
			attribute<string> Label:  expr = "Name",                        DialogType = "LabelText";
			attribute<uint32> Color:  expr = "luModel/Color[nr_OrgEntity]", DialogType = "BrushColor";
			attribute<.>      nr:     expr = "id(.)";
			attribute<string> id_str: expr = "String(nr)";
		}
		unit<uint8> luExogenous: expr = "Subset(!luModel/IsEndogenous)"
		{
			attribute<string> Name:   expr = "luModel/Name[nr_OrgEntity]";
			attribute<string> Label:  expr = "Name",                        DialogType = "LabelText";
			attribute<uint32> Color:  expr = "luModel/Color[nr_OrgEntity]", DialogType = "BrushColor";
			attribute<.>      nr:     expr = "id(.)";
			attribute<string> id_str: expr = "String(nr)";
		}
	}
	unit<uint8> materialtype: nrofrows = 15
	{
		attribute<string> label:
			['Koper'         ,'Mangaan'          ,'IJzererts',
			 'Goud'          ,'Platina'          ,'Dolomiet',
			 'Bauxiet'       ,'Bauxietverwerking','Raffinaderij',
			 'Aardolie'      ,'Chroom'           ,'Diamant',
			 'Molybdeen'     ,'Nikkel'           ,'Tin']
		,	DialogType = "LabelText";
		attribute<UInt32> SymbolColor:
			[rgb(150, 90, 65),rgb(181,167,169),rgb( 75, 85,100),
			 rgb(255,220,  0),rgb(215,215,251),rgb(150,110, 55),
			 rgb(245,125, 55),rgb(245,125, 55),rgb(  0,  0, 50),
			 rgb(100,125,200),rgb(100,100,100),rgb(  0,  0,200),
			 rgb(100,100,255),rgb( 20,  0,255),rgb(200,100,100)],
			 DialogType = "SymbolColor";
		attribute<float32> SymbolSize:  DialogType = "SymbolSize",  expr = "const(32,.,float32)";
		attribute<int16>   SymbolIndex: DialogType = "SymbolIndex", expr = "const(90,., int16)";
		attribute<float32> Size:
			[1200, 800,1500,
			  500, 300, 900,
			  700,   1,   1,
			    1];
	}
	unit<uint8> roadtype: NrOfRows = 15
	{
		parameter<uint32> nrAttr: Expr = "5";
		unit<uint32> Elements: Expr = "Range(uint32, 0, nrAttr*#.)"
		{
			attribute<String> Text: 
			[
				//Car speed outside,Car speed inside,Bike speed, IsMain, Label
				'  4','  4','-1','False','footpath',
				'  4','  4','-1','False','footway',
				' 20',' 20','15','False','living_street',
				' 80',' 50','-1','True', 'motorway',
				' 20',' 20','-1','False','path',
				'  5','  5','-1','False','pedestrian',
				' 80',' 40','15','True', 'primary',
				' 30',' 30','15','False','residential',
				' 40',' 40','15','False','road',
				' 40',' 30','15','True', 'secondary',
				' 10',' 10','10','False','service&river',
				'  5','  5','-1','False','steps',
				' 30',' 30','15','False','tertiary',
				' 25',' 25','-1','False','track',
				' 25',' 25','15','True', 'unclassified'
				//rivier: 10
			];
		}
		attribute<String> Name:               Expr = "Label";
		attribute<km_hr>  CarSpeedOutside:    Expr = "Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)][km_hr]";
		attribute<km_hr>  CarSpeedInside:     Expr = "Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)][km_hr]";
		attribute<km_hr>  BikeSpeed:          Expr = "Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)][km_hr]";
		attribute<bool>   IsMain:             Expr = "bool(Elements/Text[value(UInt32(ID(.))* nrAttr + 3, Elements)])";
		attribute<String> Label:              Expr = "Elements/Text[value(UInt32(ID(.))* nrAttr + 4, Elements)]" , DialogType = "LabelText";

		attribute<bool>   IsPartOfCarNetwork: Expr = "CarSpeedInside  > value(0, km_hr)";

		attribute<m_s>    CarSpeedOutside_ms: Expr = "CarSpeedOutside / value(3600, s / hr) * value(1000, m / km)";
		attribute<m_s>    CarSpeedInside_ms:  Expr = "CarSpeedInside  / value(3600, s / hr) * value(1000, m / km)";

		attribute<uint32> PenColor:
			[rgb(164,164,164),rgb(164,164,164),rgb(255,255,255),rgb(255,128,  0),rgb(164,164,164),rgb(164,164,164),rgb(255,128,  0),rgb(255,255,255),
			 rgb(255,255,  0),rgb(255,255,  0),rgb(255,255,255),rgb(164,164,164),rgb(255,255,255),rgb(164,164,164),rgb(164,164,164)],
			DialogType = "PenColor";
		attribute<int16>  PenWidth: [1,1,1,2,1,1,2,1,1,1,1,1,1,1,1], DialogType = "PenWidth";
		attribute<uint32> PenColorBW: expr = "const(rgb(0,0,0),roadtype,uint32)";
	}
	unit<uint8>AfBij: nrofrows = 4
	{
		attribute<string> Label: DialogType = "LabelText",
		[
			'NietInHuidigEnNietInToekomstig','InHuidigEnToekomstig','AlleenInToekomstig','AlleenInHuidig'
		];
		attribute<uint32> Color: DialogType = "BrushColor",
		[
			rgb(255,255,255),rgb(100,100,255),rgb(0,200,20),rgb(255,0,0)
		];
	}
	unit<uint8>AfBijScenarios: nrofrows = 4
	{
		attribute<string> Label: DialogType = "LabelText",
		[
			'InBeideScenariosNiet','InBeideScenarios','AlleenInNewInfrastructure','AlleenInHighPopulation'
		];
		attribute<uint32> Color: DialogType = "BrushColor",
		[
			rgb(255,255,255),rgb(100,100,255),rgb(0,200,20),rgb(255,0,0)
		];
	}
	unit<uint8> OperatorType: nrofrows = 3
	{
		attribute<UInt32> BrushColor: DialogType = "BrushColor",
			[rgb(192,192,192),rgb(128,0,255),rgb(255,128,255)];

		attribute<String> Label: DialogType = "LabelText",
			['less-or-equal (max.)','equal','greater or equal (min.)'];
	}
}